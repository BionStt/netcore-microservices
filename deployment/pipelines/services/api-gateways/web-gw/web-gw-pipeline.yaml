  
# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
    branches:
      include:
      - master
    paths:
      include:
      - src/services/API-Gws/Web.Gw/*
      - deployment/aks/services/api-gateways/web-gw/web-gw-deployment.yaml

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a4e13493-d135-43c1-914e-566cd6169f6c'
  imageRepository: 'webgw'
  containerRegistry: 'netcoremicroservicesacr.azurecr.io'
  dockerfilePath: 'src/services/API-Gws/Web.Gw/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'netcoremicroservicesacr14528368-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  condition: |
    and(
        eq(variables['Build.SourceBranch'], 'master'),
    )         
  )
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/
        tags: |
          $(tag)
    - upload: deployment/aks
      artifact: aks

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'patrikduchnetcoremicroservices.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/aks/services/api-gateways/web-gw/web-gw-deployment.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)